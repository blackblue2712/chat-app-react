{"ast":null,"code":"import _ from 'lodash';\n\nclass Emitter {\n  constructor() {\n    this.events = {};\n  }\n\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(fn => fn(...args));\n    }\n\n    return this;\n  }\n\n  on(event, fn) {\n    if (this.events[event]) this.events[event].push(fn);else this.events[event] = [fn];\n    return this;\n  }\n\n  off(event, fn) {\n    if (event && _.isFunction(fn)) {\n      const listeners = this.events[event];\n      const index = listeners.findIndex(_fn => _fn === fn);\n      listeners.splice(index, 1);\n    } else this.events[event] = [];\n\n    return this;\n  }\n\n}\n\nexport default Emitter;","map":{"version":3,"sources":["/opt/lampp/htdocs/STUDY_SPACE/chat-app/src/calls/Emitter.js"],"names":["_","Emitter","constructor","events","emit","event","args","forEach","fn","on","push","off","isFunction","listeners","index","findIndex","_fn","splice"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,EAAAA,IAAI,CAACC,KAAD,EAAQ,GAAGC,IAAX,EAAiB;AACnB,QAAI,KAAKH,MAAL,CAAYE,KAAZ,CAAJ,EAAwB;AACtB,WAAKF,MAAL,CAAYE,KAAZ,EAAmBE,OAAnB,CAA2BC,EAAE,IAAIA,EAAE,CAAC,GAAGF,IAAJ,CAAnC;AACD;;AACD,WAAO,IAAP;AACD;;AAEDG,EAAAA,EAAE,CAACJ,KAAD,EAAQG,EAAR,EAAY;AACZ,QAAI,KAAKL,MAAL,CAAYE,KAAZ,CAAJ,EAAwB,KAAKF,MAAL,CAAYE,KAAZ,EAAmBK,IAAnB,CAAwBF,EAAxB,EAAxB,KACK,KAAKL,MAAL,CAAYE,KAAZ,IAAqB,CAACG,EAAD,CAArB;AACL,WAAO,IAAP;AACD;;AAEDG,EAAAA,GAAG,CAACN,KAAD,EAAQG,EAAR,EAAY;AACb,QAAIH,KAAK,IAAIL,CAAC,CAACY,UAAF,CAAaJ,EAAb,CAAb,EAA+B;AAC7B,YAAMK,SAAS,GAAG,KAAKV,MAAL,CAAYE,KAAZ,CAAlB;AACA,YAAMS,KAAK,GAAGD,SAAS,CAACE,SAAV,CAAoBC,GAAG,IAAIA,GAAG,KAAKR,EAAnC,CAAd;AACAK,MAAAA,SAAS,CAACI,MAAV,CAAiBH,KAAjB,EAAwB,CAAxB;AACD,KAJD,MAIO,KAAKX,MAAL,CAAYE,KAAZ,IAAqB,EAArB;;AACP,WAAO,IAAP;AACD;;AAzBW;;AA4Bd,eAAeJ,OAAf","sourcesContent":["import _ from 'lodash';\n\nclass Emitter {\n  constructor() {\n    this.events = {};\n  }\n\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(fn => fn(...args));\n    }\n    return this;\n  }\n\n  on(event, fn) {\n    if (this.events[event]) this.events[event].push(fn);\n    else this.events[event] = [fn];\n    return this;\n  }\n\n  off(event, fn) {\n    if (event && _.isFunction(fn)) {\n      const listeners = this.events[event];\n      const index = listeners.findIndex(_fn => _fn === fn);\n      listeners.splice(index, 1);\n    } else this.events[event] = [];\n    return this;\n  }\n}\n\nexport default Emitter;\n"]},"metadata":{},"sourceType":"module"}