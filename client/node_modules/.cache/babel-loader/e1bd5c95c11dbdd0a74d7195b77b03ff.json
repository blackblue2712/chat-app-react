{"ast":null,"code":"import _ from 'lodash';\nimport Emitter from './Emitter';\n/**\n * Manage all media devices\n */\n\nclass MediaDevice extends Emitter {\n  /**\n   * Start media devices and send stream\n   */\n  start(config) {\n    const constraints = {\n      video: {\n        facingMode: 'user',\n        height: {\n          min: 360,\n          ideal: 720,\n          max: 1080\n        }\n      },\n      audio: true\n    };\n    console.log(this.stream);\n    navigator.mediaDevices.getUserMedia(config).then(stream => {\n      this.stream = stream;\n      this.emit('stream', stream);\n    }).catch(err => {\n      console.log(err);\n\n      if (err instanceof DOMException) {\n        alert('Cannot open webcam and/or microphone');\n      } else {\n        console.log(err);\n      }\n    });\n    return this;\n  }\n  /**\n   * Turn on/off a device\n   * @param {String} type - Type of the device\n   * @param {Boolean} [on] - State of the device\n   */\n\n\n  toggle(type, on) {\n    const len = arguments.length;\n\n    if (this.stream) {\n      this.stream[`get${type}Tracks`]().forEach(track => {\n        const state = len === 2 ? on : !track.enabled;\n\n        _.set(track, 'enabled', state);\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Stop all media track of devices\n   */\n\n\n  stop() {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n    }\n\n    return this;\n  }\n\n}\n\nexport default MediaDevice;","map":{"version":3,"sources":["/opt/lampp/htdocs/STUDY_SPACE/chat-app/src/calls/MediaDevice.js"],"names":["_","Emitter","MediaDevice","start","config","constraints","video","facingMode","height","min","ideal","max","audio","console","log","stream","navigator","mediaDevices","getUserMedia","then","emit","catch","err","DOMException","alert","toggle","type","on","len","arguments","length","forEach","track","state","enabled","set","stop","getTracks"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;;;;AAGA,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AAC9B;;;AAGAE,EAAAA,KAAK,CAACC,MAAD,EAAS;AACV,UAAMC,WAAW,GAAG;AAChBC,MAAAA,KAAK,EAAE;AACHC,QAAAA,UAAU,EAAE,MADT;AAEHC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,GAAP;AAAYC,UAAAA,KAAK,EAAE,GAAnB;AAAwBC,UAAAA,GAAG,EAAE;AAA7B;AAFL,OADS;AAKhBC,MAAAA,KAAK,EAAE;AALS,KAApB;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAjB;AAEAC,IAAAA,SAAS,CAACC,YAAV,CACKC,YADL,CACkBd,MADlB,EAEKe,IAFL,CAEWJ,MAAD,IAAY;AACd,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKK,IAAL,CAAU,QAAV,EAAoBL,MAApB;AACH,KALL,EAMKM,KANL,CAMYC,GAAD,IAAS;AACZT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;;AACA,UAAIA,GAAG,YAAYC,YAAnB,EAAiC;AAC7BC,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACH,OAFD,MAEO;AACHX,QAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACH;AACJ,KAbL;AAeA,WAAO,IAAP;AACH;AAED;;;;;;;AAKAG,EAAAA,MAAM,CAACC,IAAD,EAAOC,EAAP,EAAW;AACb,UAAMC,GAAG,GAAGC,SAAS,CAACC,MAAtB;;AACA,QAAI,KAAKf,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAa,MAAKW,IAAK,QAAvB,IAAkCK,OAAlC,CAA2CC,KAAD,IAAW;AACjD,cAAMC,KAAK,GAAGL,GAAG,KAAK,CAAR,GAAYD,EAAZ,GAAiB,CAACK,KAAK,CAACE,OAAtC;;AACAlC,QAAAA,CAAC,CAACmC,GAAF,CAAMH,KAAN,EAAa,SAAb,EAAwBC,KAAxB;AACH,OAHD;AAIH;;AACD,WAAO,IAAP;AACH;AAED;;;;;AAGAG,EAAAA,IAAI,GAAG;AACH,QAAI,KAAKrB,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYsB,SAAZ,GAAwBN,OAAxB,CAAgCC,KAAK,IAAIA,KAAK,CAACI,IAAN,EAAzC;AACH;;AACD,WAAO,IAAP;AACH;;AAzD6B;;AA4DlC,eAAelC,WAAf","sourcesContent":["import _ from 'lodash';\nimport Emitter from './Emitter';\n\n/**\n * Manage all media devices\n */\nclass MediaDevice extends Emitter {\n    /**\n     * Start media devices and send stream\n     */\n    start(config) {\n        const constraints = {\n            video: {\n                facingMode: 'user',\n                height: { min: 360, ideal: 720, max: 1080 }\n            },\n            audio: true\n        };\n\n        console.log(this.stream);\n\n        navigator.mediaDevices\n            .getUserMedia(config)\n            .then((stream) => {\n                this.stream = stream;\n                this.emit('stream', stream);\n            })\n            .catch((err) => {\n                console.log(err)\n                if (err instanceof DOMException) {\n                    alert('Cannot open webcam and/or microphone');\n                } else {\n                    console.log(err);\n                }\n            });\n\n        return this;\n    }\n\n    /**\n     * Turn on/off a device\n     * @param {String} type - Type of the device\n     * @param {Boolean} [on] - State of the device\n     */\n    toggle(type, on) {\n        const len = arguments.length;\n        if (this.stream) {\n            this.stream[`get${type}Tracks`]().forEach((track) => {\n                const state = len === 2 ? on : !track.enabled;\n                _.set(track, 'enabled', state);\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Stop all media track of devices\n     */\n    stop() {\n        if (this.stream) {\n            this.stream.getTracks().forEach(track => track.stop());\n        }\n        return this;\n    }\n}\n\nexport default MediaDevice;\n"]},"metadata":{},"sourceType":"module"}