{"ast":null,"code":"import _ from 'lodash';\nimport Emitter from './Emitter';\n/**\n * Manage all media devices\n */\n\nclass MediaDevice extends Emitter {\n  /**\n   * Start media devices and send stream\n   */\n  start(config) {\n    const constraints = {\n      video: {\n        facingMode: 'user',\n        height: {\n          min: 360,\n          ideal: 720,\n          max: 1080\n        }\n      },\n      audio: true\n    };\n    navigator.mediaDevices.getDisplayMedia(config || constraints).then(stream => {\n      this.stream = stream;\n      this.emit('stream', stream);\n    }).catch(err => {\n      if (err instanceof DOMException) {\n        alert('Cannot open webcam and/or microphone');\n      } else {\n        console.log(err);\n      }\n    });\n    return this;\n  }\n\n  startRecordScreen(config) {\n    const constraints = {\n      video: {\n        facingMode: 'user',\n        height: {\n          min: 360,\n          ideal: 720,\n          max: 1080\n        }\n      },\n      audio: true\n    };\n    navigator.mediaDevices.getUserMedia(config || constraints).then(stream => {\n      this.stream = stream;\n      this.emit('stream', stream);\n    }).catch(err => {\n      if (err instanceof DOMException) {\n        alert('Cannot open webcam and/or microphone');\n      } else {\n        console.log(err);\n      }\n    });\n    return this;\n  }\n  /**\n   * Turn on/off a device\n   * @param {String} type - Type of the device\n   * @param {Boolean} [on] - State of the device\n   */\n\n\n  toggle(type, on) {\n    const len = arguments.length;\n\n    if (this.stream) {\n      this.stream[`get${type}Tracks`]().forEach(track => {\n        const state = len === 2 ? on : !track.enabled;\n\n        _.set(track, 'enabled', state);\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Stop all media track of devices\n   */\n\n\n  stop() {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n    }\n\n    return this;\n  }\n\n}\n\nexport default MediaDevice;","map":{"version":3,"sources":["/opt/lampp/htdocs/STUDY_SPACE/chat-app/src/calls/MediaDevice.js"],"names":["_","Emitter","MediaDevice","start","config","constraints","video","facingMode","height","min","ideal","max","audio","navigator","mediaDevices","getDisplayMedia","then","stream","emit","catch","err","DOMException","alert","console","log","startRecordScreen","getUserMedia","toggle","type","on","len","arguments","length","forEach","track","state","enabled","set","stop","getTracks"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA;;;;AAGA,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AAChC;;;AAGAE,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ,UAAMC,WAAW,GAAG;AAClBC,MAAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,MADP;AAELC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,GAAP;AAAYC,UAAAA,KAAK,EAAE,GAAnB;AAAwBC,UAAAA,GAAG,EAAE;AAA7B;AAFH,OADW;AAKlBC,MAAAA,KAAK,EAAE;AALW,KAApB;AAQAC,IAAAA,SAAS,CAACC,YAAV,CACGC,eADH,CACmBX,MAAM,IAAIC,WAD7B,EAEGW,IAFH,CAESC,MAAD,IAAY;AAChB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,IAAL,CAAU,QAAV,EAAoBD,MAApB;AACD,KALH,EAMGE,KANH,CAMUC,GAAD,IAAS;AACd,UAAIA,GAAG,YAAYC,YAAnB,EAAiC;AAC/BC,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACD;AACF,KAZH;AAcA,WAAO,IAAP;AACD;;AAEDK,EAAAA,iBAAiB,CAACrB,MAAD,EAAS;AACxB,UAAMC,WAAW,GAAG;AAChBC,MAAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,MADP;AAELC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,GAAP;AAAYC,UAAAA,KAAK,EAAE,GAAnB;AAAwBC,UAAAA,GAAG,EAAE;AAA7B;AAFH,OADS;AAKhBC,MAAAA,KAAK,EAAE;AALS,KAApB;AAQEC,IAAAA,SAAS,CAACC,YAAV,CACGY,YADH,CACgBtB,MAAM,IAAIC,WAD1B,EAEGW,IAFH,CAESC,MAAD,IAAY;AAChB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,IAAL,CAAU,QAAV,EAAoBD,MAApB;AACD,KALH,EAMGE,KANH,CAMUC,GAAD,IAAS;AACd,UAAIA,GAAG,YAAYC,YAAnB,EAAiC;AAC/BC,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACD,OAFD,MAEO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACD;AACF,KAZH;AAcA,WAAO,IAAP;AACH;AAED;;;;;;;AAKAO,EAAAA,MAAM,CAACC,IAAD,EAAOC,EAAP,EAAW;AACf,UAAMC,GAAG,GAAGC,SAAS,CAACC,MAAtB;;AACA,QAAI,KAAKf,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAa,MAAKW,IAAK,QAAvB,IAAkCK,OAAlC,CAA2CC,KAAD,IAAW;AACnD,cAAMC,KAAK,GAAGL,GAAG,KAAK,CAAR,GAAYD,EAAZ,GAAiB,CAACK,KAAK,CAACE,OAAtC;;AACApC,QAAAA,CAAC,CAACqC,GAAF,CAAMH,KAAN,EAAa,SAAb,EAAwBC,KAAxB;AACD,OAHD;AAID;;AACD,WAAO,IAAP;AACD;AAED;;;;;AAGAG,EAAAA,IAAI,GAAG;AACL,QAAI,KAAKrB,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYsB,SAAZ,GAAwBN,OAAxB,CAAgCC,KAAK,IAAIA,KAAK,CAACI,IAAN,EAAzC;AACD;;AACD,WAAO,IAAP;AACD;;AAhF+B;;AAmFlC,eAAepC,WAAf","sourcesContent":["import _ from 'lodash';\nimport Emitter from './Emitter';\n\n/**\n * Manage all media devices\n */\nclass MediaDevice extends Emitter {\n  /**\n   * Start media devices and send stream\n   */\n  start(config) {\n    const constraints = {\n      video: {\n        facingMode: 'user',\n        height: { min: 360, ideal: 720, max: 1080 }\n      },\n      audio: true\n    };\n\n    navigator.mediaDevices\n      .getDisplayMedia(config || constraints)\n      .then((stream) => {\n        this.stream = stream;\n        this.emit('stream', stream);\n      })\n      .catch((err) => {\n        if (err instanceof DOMException) {\n          alert('Cannot open webcam and/or microphone');\n        } else {\n          console.log(err);\n        }\n      });\n\n    return this;\n  }\n\n  startRecordScreen(config) {\n    const constraints = {\n        video: {\n          facingMode: 'user',\n          height: { min: 360, ideal: 720, max: 1080 }\n        },\n        audio: true\n      };\n  \n      navigator.mediaDevices\n        .getUserMedia(config || constraints)\n        .then((stream) => {\n          this.stream = stream;\n          this.emit('stream', stream);\n        })\n        .catch((err) => {\n          if (err instanceof DOMException) {\n            alert('Cannot open webcam and/or microphone');\n          } else {\n            console.log(err);\n          }\n        });\n  \n      return this;\n  }\n\n  /**\n   * Turn on/off a device\n   * @param {String} type - Type of the device\n   * @param {Boolean} [on] - State of the device\n   */\n  toggle(type, on) {\n    const len = arguments.length;\n    if (this.stream) {\n      this.stream[`get${type}Tracks`]().forEach((track) => {\n        const state = len === 2 ? on : !track.enabled;\n        _.set(track, 'enabled', state);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Stop all media track of devices\n   */\n  stop() {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n    }\n    return this;\n  }\n}\n\nexport default MediaDevice;\n"]},"metadata":{},"sourceType":"module"}