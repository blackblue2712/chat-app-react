{"ast":null,"code":"export const getMessageIndividualUser = (data, token) => {\n  console.log(\"getMessageIndividualUser\", data);\n\n  if (!data.receiverId) {\n    return res.json({});\n  }\n\n  return fetch(`${process.env.REACT_APP_API_URL}/pm/messages?senderId=${data.senderId}&receiverId=${data.receiverId}&limit=${data.limit}&skip=${data.skip}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      \"Content-Type\": \"Application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    console.log(\"ERROR GET PM\");\n  });\n};\nexport const postSavePrivateMessage = (data, token) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/pm/new-message`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"Application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: data\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    console.log(\"ERROR POST PRIVATE MESSAGE\");\n  });\n};\nexport const getTotalUnreadMessages = (uid, token) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/pm/messages/unread?uid=${uid}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => {\n    return res.json();\n  }).catch(err => {\n    console.log(\"ERROR GET TOTAL UNREAD MESSAGES\");\n  });\n};\nexport const readMessage = (uid, sender) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/pm/messages/read?receiver=${uid}&sender=${sender}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"Application/json\"\n    }\n  }).catch(err => {\n    console.log(\"ERROR GET TOTAL UNREAD MESSAGES\");\n  });\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/STUDY_SPACE/chat-app/src/controllers/PrivateChat.js"],"names":["getMessageIndividualUser","data","token","console","log","receiverId","res","json","fetch","process","env","REACT_APP_API_URL","senderId","limit","skip","method","headers","Accept","Authorization","then","catch","err","postSavePrivateMessage","body","getTotalUnreadMessages","uid","readMessage","sender"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCH,IAAxC;;AACA,MAAG,CAACA,IAAI,CAACI,UAAT,EAAqB;AACjB,WAAOC,GAAG,CAACC,IAAJ,CAAS,EAAT,CAAP;AACH;;AACD,SAAOC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,yBAAwBV,IAAI,CAACW,QAAS,eAAcX,IAAI,CAACI,UAAW,UAASJ,IAAI,CAACY,KAAM,SAAQZ,IAAI,CAACa,IAAK,EAA5I,EAA+I;AACvJC,IAAAA,MAAM,EAAE,KAD+I;AAEvJC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB,kBAFX;AAGLC,MAAAA,aAAa,EAAG,UAAShB,KAAM;AAH1B;AAF8I,GAA/I,CAAL,CAQNiB,IARM,CAQAb,GAAG,IAAI;AACV,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,GAVM,EAWNa,KAXM,CAWCC,GAAG,IAAI;AACXlB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,GAbM,CAAP;AAcH,CAnBM;AAqBP,OAAO,MAAMkB,sBAAsB,GAAG,CAACrB,IAAD,EAAOC,KAAP,KAAiB;AACnD,SAAOM,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,iBAAlC,EAAoD;AAC5DI,IAAAA,MAAM,EAAE,MADoD;AAE5DC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAELC,MAAAA,aAAa,EAAG,UAAShB,KAAM;AAF1B,KAFmD;AAM5DqB,IAAAA,IAAI,EAAEtB;AANsD,GAApD,CAAL,CAQNkB,IARM,CAQAb,GAAG,IAAI;AACV,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,GAVM,EAWNa,KAXM,CAWCC,GAAG,IAAI;AACXlB,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,GAbM,CAAP;AAcH,CAfM;AAiBP,OAAO,MAAMoB,sBAAsB,GAAG,CAACC,GAAD,EAAMvB,KAAN,KAAgB;AAClD,SAAOM,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,2BAA0Bc,GAAI,EAAhE,EAAmE;AAC3EV,IAAAA,MAAM,EAAE,KADmE;AAE3EC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAELC,MAAAA,aAAa,EAAG,UAAShB,KAAM;AAF1B;AAFkE,GAAnE,CAAL,CAONiB,IAPM,CAOAb,GAAG,IAAI;AACV,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,GATM,EAUNa,KAVM,CAUCC,GAAG,IAAI;AACXlB,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACH,GAZM,CAAP;AAaH,CAdM;AAiBP,OAAO,MAAMsB,WAAW,GAAG,CAACD,GAAD,EAAME,MAAN,KAAiB;AACxC,SAAOnB,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,8BAA6Bc,GAAI,WAAUE,MAAO,EAApF,EAAuF;AAC/FZ,IAAAA,MAAM,EAAE,KADuF;AAE/FC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE;AADH;AAFsF,GAAvF,CAAL,CAMNG,KANM,CAMCC,GAAG,IAAI;AACXlB,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACH,GARM,CAAP;AASH,CAVM","sourcesContent":["export const getMessageIndividualUser = (data, token) => {\n    console.log(\"getMessageIndividualUser\", data);\n    if(!data.receiverId) {\n        return res.json({})\n    }\n    return fetch(`${process.env.REACT_APP_API_URL}/pm/messages?senderId=${data.senderId}&receiverId=${data.receiverId}&limit=${data.limit}&skip=${data.skip}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            \"Content-Type\": \"Application/json\",\n            Authorization: `Bearer ${token}`\n        }\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        console.log(\"ERROR GET PM\");\n    });\n}\n\nexport const postSavePrivateMessage = (data, token) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/pm/new-message`, {\n        method: \"POST\",\n        headers: {\n            Accept: \"Application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: data\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        console.log(\"ERROR POST PRIVATE MESSAGE\");\n    });\n}\n\nexport const getTotalUnreadMessages = (uid, token) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/pm/messages/unread?uid=${uid}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n            Authorization: `Bearer ${token}`,\n        }\n    })\n    .then( res => {\n        return res.json();\n    })\n    .catch( err => {\n        console.log(\"ERROR GET TOTAL UNREAD MESSAGES\");\n    });\n}\n\n\nexport const readMessage = (uid, sender) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/pm/messages/read?receiver=${uid}&sender=${sender}`, {\n        method: \"GET\",\n        headers: {\n            Accept: \"Application/json\",\n        }\n    })\n    .catch( err => {\n        console.log(\"ERROR GET TOTAL UNREAD MESSAGES\");\n    });\n}\n\n"]},"metadata":{},"sourceType":"module"}