{"ast":null,"code":"import MediaDevice from './MediaDevice';\nimport Emitter from './Emitter';\nimport socketIOClient from 'socket.io-client';\nconst PC_CONFIG = {\n  iceServers: [{\n    urls: ['stun:stun.l.google.com:19302']\n  }]\n};\n\nclass PeerConnection extends Emitter {\n  /**\n     * Create a PeerConnection.\n     * @param {String} friendID - ID of the friend you want to call.\n     */\n  constructor(friendID, from) {\n    super();\n    this.socket = socketIOClient(process.env.REACT_APP_API_URL, {\n      transports: ['websocket']\n    });\n    this.pc = new RTCPeerConnection(PC_CONFIG);\n\n    this.pc.onicecandidate = event => this.socket.emit('call', {\n      to: this.friendID,\n      candidate: event.candidate\n    });\n\n    this.pc.ontrack = event => this.emit('peerStream', event.streams[0]);\n\n    this.mediaDevice = new MediaDevice();\n    this.friendID = friendID;\n    this.from = from;\n  }\n  /**\n   * Starting the call\n   * @param {Boolean} isCaller\n   * @param {Object} config - configuration for the call {audio: boolean, video: boolean}\n   */\n\n\n  start(isCaller, config) {\n    this.mediaDevice.on('stream', stream => {\n      stream.getTracks().forEach(track => {\n        this.pc.addTrack(track, stream);\n      });\n      this.emit('localStream', stream);\n      if (isCaller) this.socket.emit('request', {\n        to: this.friendID,\n        from: this.from\n      });else this.createOffer();\n    }).start(config);\n    return this;\n  }\n  /**\n   * Stop the call\n   * @param {Boolean} isStarter\n   */\n\n\n  stop(isStarter) {\n    if (isStarter) {\n      this.socket.emit('end', {\n        to: this.friendID\n      });\n    }\n\n    this.mediaDevice.stop();\n    this.pc.close();\n    this.pc = null;\n    this.off();\n    return this;\n  }\n\n  createOffer() {\n    this.pc.createOffer().then(this.getDescription.bind(this)).catch(err => console.log(err));\n    return this;\n  }\n\n  createAnswer() {\n    this.pc.createAnswer().then(this.getDescription.bind(this)).catch(err => console.log(err));\n    return this;\n  }\n\n  getDescription(desc) {\n    this.pc.setLocalDescription(desc);\n    this.socket.emit('call', {\n      to: this.friendID,\n      from: this.from,\n      sdp: desc\n    });\n    return this;\n  }\n  /**\n   * @param {Object} sdp - Session description\n   */\n\n\n  setRemoteDescription(sdp) {\n    const rtcSdp = new RTCSessionDescription(sdp);\n    this.pc.setRemoteDescription(rtcSdp);\n    return this;\n  }\n  /**\n   * @param {Object} candidate - ICE Candidate\n   */\n\n\n  addIceCandidate(candidate) {\n    if (candidate) {\n      const iceCandidate = new RTCIceCandidate(candidate);\n      this.pc.addIceCandidate(iceCandidate);\n    }\n\n    return this;\n  }\n\n}\n\nexport default PeerConnection;","map":{"version":3,"sources":["/opt/lampp/htdocs/STUDY_SPACE/chat-app/src/calls/PeerConnection.js"],"names":["MediaDevice","Emitter","socketIOClient","PC_CONFIG","iceServers","urls","PeerConnection","constructor","friendID","from","socket","process","env","REACT_APP_API_URL","transports","pc","RTCPeerConnection","onicecandidate","event","emit","to","candidate","ontrack","streams","mediaDevice","start","isCaller","config","on","stream","getTracks","forEach","track","addTrack","createOffer","stop","isStarter","close","off","then","getDescription","bind","catch","err","console","log","createAnswer","desc","setLocalDescription","sdp","setRemoteDescription","rtcSdp","RTCSessionDescription","addIceCandidate","iceCandidate","RTCIceCandidate"],"mappings":"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","sourcesContent":["import MediaDevice from './MediaDevice';\nimport Emitter from './Emitter';\nimport socketIOClient from 'socket.io-client';\n\nconst PC_CONFIG = { iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }] };\n\nclass PeerConnection extends Emitter {\n  /**\n     * Create a PeerConnection.\n     * @param {String} friendID - ID of the friend you want to call.\n     */\n  constructor(friendID, from) {\n    super();\n    this.socket = socketIOClient(process.env.REACT_APP_API_URL, { transports: ['websocket'] });\n    this.pc = new RTCPeerConnection(PC_CONFIG);\n    this.pc.onicecandidate = event => this.socket.emit('call', {\n      to: this.friendID,\n      candidate: event.candidate\n    });\n    this.pc.ontrack = event => this.emit('peerStream', event.streams[0]);\n\n    this.mediaDevice = new MediaDevice();\n    this.friendID = friendID;\n    this.from  = from;\n  }\n\n  /**\n   * Starting the call\n   * @param {Boolean} isCaller\n   * @param {Object} config - configuration for the call {audio: boolean, video: boolean}\n   */\n  start(isCaller, config) {\n    this.mediaDevice\n      .on('stream', (stream) => {\n        stream.getTracks().forEach((track) => {\n          this.pc.addTrack(track, stream);\n        });\n        this.emit('localStream', stream);\n        if (isCaller) this.socket.emit('request', { to: this.friendID, from: this.from });\n        else this.createOffer();\n      })\n      .start(config);\n\n    return this;\n  }\n\n  /**\n   * Stop the call\n   * @param {Boolean} isStarter\n   */\n  stop(isStarter) {\n    if (isStarter) {\n        this.socket.emit('end', { to: this.friendID });\n    }\n    this.mediaDevice.stop();\n    this.pc.close();\n    this.pc = null;\n    this.off();\n    return this;\n  }\n\n  createOffer() {\n    this.pc.createOffer()\n      .then(this.getDescription.bind(this))\n      .catch(err => console.log(err));\n    return this;\n  }\n\n  createAnswer() {\n    this.pc.createAnswer()\n      .then(this.getDescription.bind(this))\n      .catch(err => console.log(err));\n    return this;\n  }\n\n  getDescription(desc) {\n    this.pc.setLocalDescription(desc);\n    this.socket.emit('call', { to: this.friendID, from: this.from, sdp: desc });\n    return this;\n  }\n\n  /**\n   * @param {Object} sdp - Session description\n   */\n  setRemoteDescription(sdp) {\n    const rtcSdp = new RTCSessionDescription(sdp);\n    this.pc.setRemoteDescription(rtcSdp);\n    return this;\n  }\n\n  /**\n   * @param {Object} candidate - ICE Candidate\n   */\n  addIceCandidate(candidate) {\n    if (candidate) {\n      const iceCandidate = new RTCIceCandidate(candidate);\n      this.pc.addIceCandidate(iceCandidate);\n    }\n    return this;\n  }\n}\n\nexport default PeerConnection;\n"]},"metadata":{},"sourceType":"module"}